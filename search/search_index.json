{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 The Qlik Sense on Kubernetes Operator CLI ( qliksense ) facilitates: Installation of QSEoK Installation of Qliksense operator to manage the QSEoK installation Air gapped installation of QSEoK Cluster configuration management Pre-flight and Post-flight environment and configuration checks The Qlik Sense on Kubernetes Operator CLI provides an imperative interface to many of the configurations that need to be applied against the declarative structure described in the qliksense-k8s repository To get start quickly go to the Getting Started page . To learn more about the internal workings of the Qlik Sense on Kubernetes Operator, go to How CLI works . This is a technology preview that uses Qlik modified kustomize for Kubernetes manifests on qliksense-k8s repository See QlikSense edge releases on qliksense-k8s repository","title":"Overview"},{"location":"#overview","text":"The Qlik Sense on Kubernetes Operator CLI ( qliksense ) facilitates: Installation of QSEoK Installation of Qliksense operator to manage the QSEoK installation Air gapped installation of QSEoK Cluster configuration management Pre-flight and Post-flight environment and configuration checks The Qlik Sense on Kubernetes Operator CLI provides an imperative interface to many of the configurations that need to be applied against the declarative structure described in the qliksense-k8s repository To get start quickly go to the Getting Started page . To learn more about the internal workings of the Qlik Sense on Kubernetes Operator, go to How CLI works . This is a technology preview that uses Qlik modified kustomize for Kubernetes manifests on qliksense-k8s repository See QlikSense edge releases on qliksense-k8s repository","title":"Overview"},{"location":"air_gap/","text":"","title":"Air gap"},{"location":"command_reference/","text":"CLI reference \u00b6 qliksense preflight \u00b6 Preflight checks provide pre-installation cluster conformance testing and validation before we install qliksense on the cluster. We gather a suite of conformance tests that can be easily written and run on the target cluster to verify that cluster-specific requirements are met. We support a couple of tests at the moment as part of preflight checks, and the range of the suite will be expanded in future. Run the following command to view help about the commands supported by preflight at any moment: qliksense preflight Running all checks \u00b6 Run the following command to execute all preflight checks qliksense preflight all --mongodb-url=<mongo-server url> --mongodb-ca-cert=<path to ca-cert file> Running specific check \u00b6 Run the following command to execute a specific check qliksense preflight dns Running cleanup \u00b6 Run the following command to cleanup entities created for preflight checks that were left behind on the cluster. qliksense preflight clean qliksense postflight \u00b6 Postflight checks are performed after qliksense is installed on the cluster and during normal operating mode of the product. Such checks can range from validating certain conditions to checking the status of certain operations or entities. Run the following command to view help about the commands supported by postflight at any moment: qliksense postflight qliksense load \u00b6 qliksense load command takes input from a file or from pipe qliksense load -f cr-file.yaml cat cr-file.yaml | qliksense load -f - This will load the Custom Resource (CR) into ${QLIKSENSE_HOME} folder, create context structure and set the current context to that CR. This will also encrypt the secrets from CR while writing the CR into the disk. qliksense apply \u00b6 qliksense apply command takes input from a file or from pipe qliksense apply -f cr-file.yaml cat cr-file.yaml | qliksense apply -f - The content of cr-file.yaml should be something like the following: apiVersion : qlik.com/v1 kind : Qliksense metadata : name : qlik-test labels : version : v0.0.2 spec : configs : qliksense : - name : acceptEULA value : \"yes\" secrets : qliksense : - name : mongodbUri value : mongodb://qlik-test-mongodb:27017/qliksense?ssl=false profile : docker-desktop qliksense apply does everything qliksense load does but will install Qlik Sense into the cluster as well qliksense about \u00b6 qliksense about command will display information about qliksense-k8s release. For example, running the following command will show information about default profile for 1.0.0 tag qliksense about 1.0.0 Run the following command to view options for about command: qliksense about --help Using other supported commands user might have built the CR into the location ~/.qliksense/myqliksense.yaml apiVersion : qlik.com/v1 kind : QlikSense metadata : name : myqliksense spec : profile : docker-desktop manifestsRoot : /Usr/xyz/my-k8-repo/manifests namespace : myqliksense storageClassName : efs configs : qliksense : - name : acceptEULA value : \"yes\" secrets : qliksense : - name : mongodbUri value : \"mongo://mongo:3307\" - name : messagingPassword valueFromKey : messagingPassword In this case, the result of qliksense about command would display information from: /Usr/xyz/my-k8-repo/manifests/docker-desktop location, or Pull and show information from master branch if the directory is invalid or empty qliksense config \u00b6 qliksense config will perform operations on configurations and contexts regarding the qliksense-k8 release. It supports the following flags: qliksense config list-contexts - get and list contexts qliksense config set - configure a key-value pair into the current context qliksense config set-configs - set configurations into qliksense context as key-value pairs qliksense config set-context - sets the Kubernetes context where resources are located qliksense config set-secrets <service_name>.<attribute>=\"<value>\" --secret=false - set secrets configurations into qliksense context as key-value pairs and show encrypted value as part of CR qliksense config set-secrets <service_name>.<attribute>=\"<value>\" --secret=true - set secrets configurations into qliksense context as key-value pairs and show a key reference to the created Kubernetes secret resource as part of the CR qliksense config view - view the qliksense operator CR qliksense config delete-context - deletes a specific context locally (not in-cluster). Deletes context in spec of config.yaml and locally deletes entire folder of specified context (does not delete secrets from cluster) The global file which abstracts all contexts is ~/.qliksense/config.yaml apiVersion : config.qlik.com/v1 kind : QliksenseConfig metadata : name : QliksenseConfigMetadata spec : contexts : - name : qlik-default crFile : /Users/xyz/.qliksense/contexts/qlik-default/qlik-default.yaml - name : myqliksense crFile : /Users/xyz/.qliksense/contexts/myqliksense/myqliksense.yaml - name : hello crFile : /Users/xyz/.qliksense/contexts/hello/hello.yaml currentContext : hello","title":"CLI reference"},{"location":"command_reference/#cli-reference","text":"","title":"CLI reference"},{"location":"command_reference/#qliksense-preflight","text":"Preflight checks provide pre-installation cluster conformance testing and validation before we install qliksense on the cluster. We gather a suite of conformance tests that can be easily written and run on the target cluster to verify that cluster-specific requirements are met. We support a couple of tests at the moment as part of preflight checks, and the range of the suite will be expanded in future. Run the following command to view help about the commands supported by preflight at any moment: qliksense preflight","title":"qliksense preflight"},{"location":"command_reference/#running-all-checks","text":"Run the following command to execute all preflight checks qliksense preflight all --mongodb-url=<mongo-server url> --mongodb-ca-cert=<path to ca-cert file>","title":"Running all checks"},{"location":"command_reference/#running-specific-check","text":"Run the following command to execute a specific check qliksense preflight dns","title":"Running specific check"},{"location":"command_reference/#running-cleanup","text":"Run the following command to cleanup entities created for preflight checks that were left behind on the cluster. qliksense preflight clean","title":"Running cleanup"},{"location":"command_reference/#qliksense-postflight","text":"Postflight checks are performed after qliksense is installed on the cluster and during normal operating mode of the product. Such checks can range from validating certain conditions to checking the status of certain operations or entities. Run the following command to view help about the commands supported by postflight at any moment: qliksense postflight","title":"qliksense postflight"},{"location":"command_reference/#qliksense-load","text":"qliksense load command takes input from a file or from pipe qliksense load -f cr-file.yaml cat cr-file.yaml | qliksense load -f - This will load the Custom Resource (CR) into ${QLIKSENSE_HOME} folder, create context structure and set the current context to that CR. This will also encrypt the secrets from CR while writing the CR into the disk.","title":"qliksense load"},{"location":"command_reference/#qliksense-apply","text":"qliksense apply command takes input from a file or from pipe qliksense apply -f cr-file.yaml cat cr-file.yaml | qliksense apply -f - The content of cr-file.yaml should be something like the following: apiVersion : qlik.com/v1 kind : Qliksense metadata : name : qlik-test labels : version : v0.0.2 spec : configs : qliksense : - name : acceptEULA value : \"yes\" secrets : qliksense : - name : mongodbUri value : mongodb://qlik-test-mongodb:27017/qliksense?ssl=false profile : docker-desktop qliksense apply does everything qliksense load does but will install Qlik Sense into the cluster as well","title":"qliksense apply"},{"location":"command_reference/#qliksense-about","text":"qliksense about command will display information about qliksense-k8s release. For example, running the following command will show information about default profile for 1.0.0 tag qliksense about 1.0.0 Run the following command to view options for about command: qliksense about --help Using other supported commands user might have built the CR into the location ~/.qliksense/myqliksense.yaml apiVersion : qlik.com/v1 kind : QlikSense metadata : name : myqliksense spec : profile : docker-desktop manifestsRoot : /Usr/xyz/my-k8-repo/manifests namespace : myqliksense storageClassName : efs configs : qliksense : - name : acceptEULA value : \"yes\" secrets : qliksense : - name : mongodbUri value : \"mongo://mongo:3307\" - name : messagingPassword valueFromKey : messagingPassword In this case, the result of qliksense about command would display information from: /Usr/xyz/my-k8-repo/manifests/docker-desktop location, or Pull and show information from master branch if the directory is invalid or empty","title":"qliksense about"},{"location":"command_reference/#qliksense-config","text":"qliksense config will perform operations on configurations and contexts regarding the qliksense-k8 release. It supports the following flags: qliksense config list-contexts - get and list contexts qliksense config set - configure a key-value pair into the current context qliksense config set-configs - set configurations into qliksense context as key-value pairs qliksense config set-context - sets the Kubernetes context where resources are located qliksense config set-secrets <service_name>.<attribute>=\"<value>\" --secret=false - set secrets configurations into qliksense context as key-value pairs and show encrypted value as part of CR qliksense config set-secrets <service_name>.<attribute>=\"<value>\" --secret=true - set secrets configurations into qliksense context as key-value pairs and show a key reference to the created Kubernetes secret resource as part of the CR qliksense config view - view the qliksense operator CR qliksense config delete-context - deletes a specific context locally (not in-cluster). Deletes context in spec of config.yaml and locally deletes entire folder of specified context (does not delete secrets from cluster) The global file which abstracts all contexts is ~/.qliksense/config.yaml apiVersion : config.qlik.com/v1 kind : QliksenseConfig metadata : name : QliksenseConfigMetadata spec : contexts : - name : qlik-default crFile : /Users/xyz/.qliksense/contexts/qlik-default/qlik-default.yaml - name : myqliksense crFile : /Users/xyz/.qliksense/contexts/myqliksense/myqliksense.yaml - name : hello crFile : /Users/xyz/.qliksense/contexts/hello/hello.yaml currentContext : hello","title":"qliksense config"},{"location":"concepts/","text":"How CLI works \u00b6 At the initialization, qliksense cli creates few files in the director ~/.qliksense and it contains following files: .qliksense \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 contexts \u2502 \u2514\u2500\u2500 qlik-default \u2502 \u2514\u2500\u2500 qlik-default.yaml \u2514\u2500\u2500 ejson \u2514\u2500\u2500 keys qlik-default.yaml is a default CR created with some default values like: apiVersion : qlik.com/v1 kind : Qliksense metadata : name : qlik-default spec : profile : docker-desktop secrets : qliksense : - name : mongodbUri value : mongodb://qlik-default-mongodb:27017/qliksense?ssl=false releaseName : qlik-default The qliksense cli creates a default qliksense context (different from kubectl context) named qlik-default which will be the prefix for all kubernetes resources created by the cli under this context later on. New context and configuration can be created by the cli, get available commands using: qliksense config -h qliksense cli works in two modes With a git repo fork/clone of qliksense-k8s Without git repo Without git repo \u00b6 In this mode qliksense CLI downloads the specified version from qliksense-k8s and places it in ~/.qliksense/contexts/<context-name>/qlik-k8s folder. The qliksense cli creates a CR for the QlikSense operator and all config operations are performed to edit the CR. qliksense install will generate patches in local file system (i.e ~/.qliksense/contexts/<context-name>/qlik-k8s ) and Install those manifests into the cluster Create a custom resource (CR) for the qliksene operator . The operator makes the association to the installed resources so that when qliksense uninstall is performed the operator can delete all kubernetes resources related to QSEoK for the current context. With a git repo \u00b6 Create a fork or clone of qliksense-k8s and push it to your git repo/server To add your repo into CR, perform the following: qliksense config set git.repository = \"https://github.com/my-org/qliksense-k8s\" qliksense config set git.accessToken = \"<mySecretToken>\" When you perform qliksense install , qliksense operator performs these tasks: Download corresponding version of manifests from the your git repo Generate kustomize patches Install kubernetes resources Push generated patches into a new branch in the provided git repo. Gives you ability to merge patches into your master branch Create a CronJob to monitor master branch. Any changes pushed to master branch will be applied into the cluster. This is a light weight git-ops model GitOps \u00b6 To enable gitops, the following section should be in the CR .... spec : git : repository : https://github.com/<OWNER>/<REPO> accessToken : \"<git-token>\" userName : \"<git-username>\" gitOps : enabled : \"yes\" schedule : \"*/5 * * * *\" watchBranch : <myBranch> image : qlik-docker-oss.bintray.io/qliksense-repo-watcher ....","title":"How CLI works"},{"location":"concepts/#how-cli-works","text":"At the initialization, qliksense cli creates few files in the director ~/.qliksense and it contains following files: .qliksense \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 contexts \u2502 \u2514\u2500\u2500 qlik-default \u2502 \u2514\u2500\u2500 qlik-default.yaml \u2514\u2500\u2500 ejson \u2514\u2500\u2500 keys qlik-default.yaml is a default CR created with some default values like: apiVersion : qlik.com/v1 kind : Qliksense metadata : name : qlik-default spec : profile : docker-desktop secrets : qliksense : - name : mongodbUri value : mongodb://qlik-default-mongodb:27017/qliksense?ssl=false releaseName : qlik-default The qliksense cli creates a default qliksense context (different from kubectl context) named qlik-default which will be the prefix for all kubernetes resources created by the cli under this context later on. New context and configuration can be created by the cli, get available commands using: qliksense config -h qliksense cli works in two modes With a git repo fork/clone of qliksense-k8s Without git repo","title":"How CLI works"},{"location":"concepts/#without-git-repo","text":"In this mode qliksense CLI downloads the specified version from qliksense-k8s and places it in ~/.qliksense/contexts/<context-name>/qlik-k8s folder. The qliksense cli creates a CR for the QlikSense operator and all config operations are performed to edit the CR. qliksense install will generate patches in local file system (i.e ~/.qliksense/contexts/<context-name>/qlik-k8s ) and Install those manifests into the cluster Create a custom resource (CR) for the qliksene operator . The operator makes the association to the installed resources so that when qliksense uninstall is performed the operator can delete all kubernetes resources related to QSEoK for the current context.","title":"Without git repo"},{"location":"concepts/#with-a-git-repo","text":"Create a fork or clone of qliksense-k8s and push it to your git repo/server To add your repo into CR, perform the following: qliksense config set git.repository = \"https://github.com/my-org/qliksense-k8s\" qliksense config set git.accessToken = \"<mySecretToken>\" When you perform qliksense install , qliksense operator performs these tasks: Download corresponding version of manifests from the your git repo Generate kustomize patches Install kubernetes resources Push generated patches into a new branch in the provided git repo. Gives you ability to merge patches into your master branch Create a CronJob to monitor master branch. Any changes pushed to master branch will be applied into the cluster. This is a light weight git-ops model","title":"With a git repo"},{"location":"concepts/#gitops","text":"To enable gitops, the following section should be in the CR .... spec : git : repository : https://github.com/<OWNER>/<REPO> accessToken : \"<git-token>\" userName : \"<git-username>\" gitOps : enabled : \"yes\" schedule : \"*/5 * * * *\" watchBranch : <myBranch> image : qlik-docker-oss.bintray.io/qliksense-repo-watcher ....","title":"GitOps"},{"location":"getting_started/","text":"Getting started \u00b6 To get familiar with the Qlik Sense on Kubernetes Operator Command Line Interface (CLI), we will install Qlik Sense on Kubernetes on docker desktop. In subsequent sections we will enhance this configuration to include an Identity Provider (keycloak) and demonstrate air gapped capabilities as well. Requirements \u00b6 Kubernetes cluster (Docker Desktop with enabled Kubernetes) kubectl installed, configured and able to communicate with kubernetes cluster. qliksense CLI uses kubectl to perform some operations on cluster Installing qliksense CLI \u00b6 Download the executable for your platform from releases page and rename it to qliksense Linux # bash curl -LOJ https://storage.googleapis.com/kubernetes-release/release/v1.16.8/bin/linux/amd64/kubectl curl -LOJ https://github.com/qlik-oss/sense-installer/releases/latest/download/qliksense-linux-amd64 sudo mv qliksense-linux-amd64 kubectl /usr/local/bin sudo chmod ugo+x /usr/local/bin/qliksense-linux-amd64 /usr/local/bin/kubectl sudo ln -s /usr/local/bin/qliksense-linux-amd64 /usr/local/bin/qliksense sudo ln -s /usr/local/bin/qliksense-linux-amd64 /usr/local/bin/kubectl-qliksense MacOS # bash curl -LOJ https://storage.googleapis.com/kubernetes-release/release/v1.16.8/bin/darwin/amd64/kubectl curl -LOJ https://github.com/qlik-oss/sense-installer/releases/latest/download/qliksense-darwin-amd64 sudo mv qliksense-darwin-amd64 kubectl /usr/local/bin sudo chmod ugo+x /usr/local/bin/qliksense-darwin-amd64 /usr/local/bin/kubectl sudo ln -s /usr/local/bin/qliksense-darwin-amd64 /usr/local/bin/qliksense sudo ln -s /usr/local/bin/qliksense-darwin-amd64 /usr/local/bin/kubectl-qliksense Windows # powershell Invoke-WebRequest https : // storage . googleapis . com / kubernetes-release / release / v1 . 16 . 8 / bin / windows / amd64 / kubectl . exe -O C : \\ bin \\ kubectl . exe Invoke-WebRequest https : // github . com / qlik-oss / sense-installer / releases / latest / download / qliksense-windows-amd64 . exe -O C : \\ bin \\ qliksense . exe Copy-Item C : \\ bin \\ qliksense . exe C : \\ bin \\ kubectl-qliksense . exe # Add C:\\bin to current Path $Env:Path += \";C:\\bin\" # Save Path to User environment scope [Environment] :: SetEnvironmentVariable ( \"Path\" , [Environment] :: GetEnvironmentVariable ( \"Path\" , [EnvironmentVariableTarget] :: User ) + \";C:\\bin\" , [EnvironmentVariableTarget] :: User ) Quick start \u00b6 Setting the contexts \u00b6 By default a qlik-default configuration context is provided and can be used, as is. In effect, this is the name of the Qlik Sense instance in the target cluster. All resources installed into the target namespace will be prefixed with qlik-default . The name of the Qlik Sense application will correspondingly be qliksense . Ex.: To change this to qliksense-dev : qliksense config set-context qliksense-dev For the purposes of the Quick Start we will be using qlik-default The target namespace is determined by the kubectl connection context. ex. Ensure a connection to cluster to change the configuration context's target namespace with kubectl to qliksense kubectl config set-context --current --namespace = qliksense For the purposes of the Quick Start we will be using the default namespace. ( default ) Downloading a version of Qlik Sense on Kubernetes \u00b6 To download the latest version of Qlik Sense on Kubernetes from qliksense-k8s qliksense fetch More Options \u00b6 To download a specific version v1.59.20 from qliksense-k8s releases qliksense fetch v1.58.20 To download from a GitHub repository fork of the qliksense-k8s repository (master branch) qliksense fetch --url https://github.com/bkuschel/qliksense-k8s.git master Deployment Profiles \u00b6 Deployment profiles are a sets components that require sets of key/value pairs to satisfy the requirements for the generation of a Qlik Sense on Kubernetes manifest. Along with the profile name, sets of key/value pairs are provided through the Qlik Sense custom application resources (see here). Profiles can be developed and added to the qliksense-k8s repo but is considered an advanced topic (see here) not covered here. Default Profile: Docker Desktop \u00b6 By default, the docker-desktop profile is associated with the configuration context when initially created. This profile is guaranteed to work on Docker Desktop but can generally be used on other types of Kubernetes clusters, provided that the required configuration tweaks are provided specific to the hosting requirements (Ex. storage class). The docker-desktop profile does not have any scaling characteristics and is generally set up to have the ability to work on a reasonably powerful computer (16GB, 4 cores minimum, greater is better). It also includes a self-contained mongodb instance for non-production purposes. Generally it doesn't require any extra configuration to work except an acceptance of the Qlik User License Agreement (QULA), which is prompted on install but can also be set in advance (having read the QULA) qliksense config set-configs qliksense.acceptEULA = \"yes\" More information on the possible configuration parameters for docker-desktop here (see here). Info To access an installation of the docker desktop profile in docker desktop, the host elastic.example needs to be added to the system host file as an alias to 127.0.0.1 127.0.0.1 elastic.example File location: Linux - /etc/hosts MacOS - /etc/hosts Windows - C:\\Windows\\System32\\drivers\\etc\\hosts Installing Qlik Sense on Kubernetes \u00b6 Custom Resource Definitions (CRDs) \u00b6 Besides the CLI, a Kubernetes operator (read here) is a core component of the Qlik Sense Operator. Additionally, there are other Kubernetes operators in Qlik Sense on Kubernetes that provide other types functionality (ex. scaling). Depending on the profile chosen (see Deployment profiles) , additional CRDs can also be installed for third-party components (see gke-demo). Kubernetes operators require Custom resource definitions (CRD) (read here), which are YAML schemas for custom resources (CR). The Qlik Sense application instance, corresponding to the name of the configuration context, corresponds to a CR (ex. qlik-default ). CRDs require cluster scope permissions and are shared cluster-wide across namespaces. These need to be installed first (if not done previously). To install CRDs for Qlik Sense on Kubernetes into the Kubernetes cluster. qliksense crds install Preflight Checks \u00b6 To check that your environment fullfills Qlik Sense requirements qliksense preflight all Qlik Sense \u00b6 To install Qlik Sense into a namespace in the Kubernetes cluster where kubectl is pointing to qliksense install","title":"Getting started"},{"location":"getting_started/#getting-started","text":"To get familiar with the Qlik Sense on Kubernetes Operator Command Line Interface (CLI), we will install Qlik Sense on Kubernetes on docker desktop. In subsequent sections we will enhance this configuration to include an Identity Provider (keycloak) and demonstrate air gapped capabilities as well.","title":"Getting started"},{"location":"getting_started/#requirements","text":"Kubernetes cluster (Docker Desktop with enabled Kubernetes) kubectl installed, configured and able to communicate with kubernetes cluster. qliksense CLI uses kubectl to perform some operations on cluster","title":"Requirements"},{"location":"getting_started/#installing-qliksense-cli","text":"Download the executable for your platform from releases page and rename it to qliksense Linux # bash curl -LOJ https://storage.googleapis.com/kubernetes-release/release/v1.16.8/bin/linux/amd64/kubectl curl -LOJ https://github.com/qlik-oss/sense-installer/releases/latest/download/qliksense-linux-amd64 sudo mv qliksense-linux-amd64 kubectl /usr/local/bin sudo chmod ugo+x /usr/local/bin/qliksense-linux-amd64 /usr/local/bin/kubectl sudo ln -s /usr/local/bin/qliksense-linux-amd64 /usr/local/bin/qliksense sudo ln -s /usr/local/bin/qliksense-linux-amd64 /usr/local/bin/kubectl-qliksense MacOS # bash curl -LOJ https://storage.googleapis.com/kubernetes-release/release/v1.16.8/bin/darwin/amd64/kubectl curl -LOJ https://github.com/qlik-oss/sense-installer/releases/latest/download/qliksense-darwin-amd64 sudo mv qliksense-darwin-amd64 kubectl /usr/local/bin sudo chmod ugo+x /usr/local/bin/qliksense-darwin-amd64 /usr/local/bin/kubectl sudo ln -s /usr/local/bin/qliksense-darwin-amd64 /usr/local/bin/qliksense sudo ln -s /usr/local/bin/qliksense-darwin-amd64 /usr/local/bin/kubectl-qliksense Windows # powershell Invoke-WebRequest https : // storage . googleapis . com / kubernetes-release / release / v1 . 16 . 8 / bin / windows / amd64 / kubectl . exe -O C : \\ bin \\ kubectl . exe Invoke-WebRequest https : // github . com / qlik-oss / sense-installer / releases / latest / download / qliksense-windows-amd64 . exe -O C : \\ bin \\ qliksense . exe Copy-Item C : \\ bin \\ qliksense . exe C : \\ bin \\ kubectl-qliksense . exe # Add C:\\bin to current Path $Env:Path += \";C:\\bin\" # Save Path to User environment scope [Environment] :: SetEnvironmentVariable ( \"Path\" , [Environment] :: GetEnvironmentVariable ( \"Path\" , [EnvironmentVariableTarget] :: User ) + \";C:\\bin\" , [EnvironmentVariableTarget] :: User )","title":"Installing qliksense CLI"},{"location":"getting_started/#quick-start","text":"","title":"Quick start"},{"location":"getting_started/#setting-the-contexts","text":"By default a qlik-default configuration context is provided and can be used, as is. In effect, this is the name of the Qlik Sense instance in the target cluster. All resources installed into the target namespace will be prefixed with qlik-default . The name of the Qlik Sense application will correspondingly be qliksense . Ex.: To change this to qliksense-dev : qliksense config set-context qliksense-dev For the purposes of the Quick Start we will be using qlik-default The target namespace is determined by the kubectl connection context. ex. Ensure a connection to cluster to change the configuration context's target namespace with kubectl to qliksense kubectl config set-context --current --namespace = qliksense For the purposes of the Quick Start we will be using the default namespace. ( default )","title":"Setting the contexts"},{"location":"getting_started/#downloading-a-version-of-qlik-sense-on-kubernetes","text":"To download the latest version of Qlik Sense on Kubernetes from qliksense-k8s qliksense fetch","title":"Downloading a version of Qlik Sense on Kubernetes"},{"location":"getting_started/#more-options","text":"To download a specific version v1.59.20 from qliksense-k8s releases qliksense fetch v1.58.20 To download from a GitHub repository fork of the qliksense-k8s repository (master branch) qliksense fetch --url https://github.com/bkuschel/qliksense-k8s.git master","title":"More Options"},{"location":"getting_started/#deployment-profiles","text":"Deployment profiles are a sets components that require sets of key/value pairs to satisfy the requirements for the generation of a Qlik Sense on Kubernetes manifest. Along with the profile name, sets of key/value pairs are provided through the Qlik Sense custom application resources (see here). Profiles can be developed and added to the qliksense-k8s repo but is considered an advanced topic (see here) not covered here.","title":"Deployment Profiles"},{"location":"getting_started/#default-profile-docker-desktop","text":"By default, the docker-desktop profile is associated with the configuration context when initially created. This profile is guaranteed to work on Docker Desktop but can generally be used on other types of Kubernetes clusters, provided that the required configuration tweaks are provided specific to the hosting requirements (Ex. storage class). The docker-desktop profile does not have any scaling characteristics and is generally set up to have the ability to work on a reasonably powerful computer (16GB, 4 cores minimum, greater is better). It also includes a self-contained mongodb instance for non-production purposes. Generally it doesn't require any extra configuration to work except an acceptance of the Qlik User License Agreement (QULA), which is prompted on install but can also be set in advance (having read the QULA) qliksense config set-configs qliksense.acceptEULA = \"yes\" More information on the possible configuration parameters for docker-desktop here (see here). Info To access an installation of the docker desktop profile in docker desktop, the host elastic.example needs to be added to the system host file as an alias to 127.0.0.1 127.0.0.1 elastic.example File location: Linux - /etc/hosts MacOS - /etc/hosts Windows - C:\\Windows\\System32\\drivers\\etc\\hosts","title":"Default Profile: Docker Desktop"},{"location":"getting_started/#installing-qlik-sense-on-kubernetes","text":"","title":"Installing Qlik Sense on Kubernetes"},{"location":"getting_started/#custom-resource-definitions-crds","text":"Besides the CLI, a Kubernetes operator (read here) is a core component of the Qlik Sense Operator. Additionally, there are other Kubernetes operators in Qlik Sense on Kubernetes that provide other types functionality (ex. scaling). Depending on the profile chosen (see Deployment profiles) , additional CRDs can also be installed for third-party components (see gke-demo). Kubernetes operators require Custom resource definitions (CRD) (read here), which are YAML schemas for custom resources (CR). The Qlik Sense application instance, corresponding to the name of the configuration context, corresponds to a CR (ex. qlik-default ). CRDs require cluster scope permissions and are shared cluster-wide across namespaces. These need to be installed first (if not done previously). To install CRDs for Qlik Sense on Kubernetes into the Kubernetes cluster. qliksense crds install","title":"Custom Resource Definitions (CRDs)"},{"location":"getting_started/#preflight-checks","text":"To check that your environment fullfills Qlik Sense requirements qliksense preflight all","title":"Preflight Checks"},{"location":"getting_started/#qlik-sense","text":"To install Qlik Sense into a namespace in the Kubernetes cluster where kubectl is pointing to qliksense install","title":"Qlik Sense"},{"location":"postflight_checks/","text":"Postflight checks \u00b6 Postflight checks are performed after qliksense is installed on the cluster and during normal operating mode of the product. Such checks can range from validating certain conditions to checking the status of certain operations or entities on the kubernetes cluster. Run the following command to view help about the commands supported by postflight at any moment: $ qliksense postflight perform postflight checks on the cluster Usage: qliksense postflight [command] Examples: qliksense postflight <postflight_check_to_run> Available Commands: db-migration-check check mongodb migration status on the cluster Flags: -h, --help help for postflight -v, --verbose verbose mode Run all postflight checks \u00b6 This command runs all the postflight checks available. $ qliksense postflight all Running all postflight checks... Postflight db migration check... Logs from pod: qliksense-users-6977cb7788-qlgmv { \"caller\" : \"main.go:39\" , \"environment\" : \"qseok\" , \"error\" : \"error parsing uri: scheme must be \\\"mongodb\\\" or \\\"mongodb+srv\\\"\" , \"level\" : \"error\" , \"message\" : \"failed to connect to \" , \"timestamp\" : \"2020-06-17T04:10:11.7891913Z\" , \"version\" : \"\" } To view more logs in this context, please run the command: kubectl logs -n test_ns qliksense-users-6977cb7788-qlgmv migration PASSED All postflight checks have PASSED DB migration check \u00b6 This command checks init containers for successful database migrarion completions, and reports failure, if any to the user. An example run of this check produces an output as shown below: $ qliksense postflight db-migration-check Logs from pod: qliksense-users-6977cb7788-cxxwh { \"caller\" : \"main.go:39\" , \"environment\" : \"qseok\" , \"error\" : \"error parsing uri: scheme must be \\\"mongodb\\\" or \\\"mongodb+srv\\\"\" , \"level\" : \"error\" , \"message\" : \"failed to connect to \" , \"timestamp\" : \"2020-06-01T01:07:18.4170507Z\" , \"version\" : \"\" } To view more logs in this context, please run the command: kubectl logs -n test_ns qliksense-users-6977cb7788-qlgmv migration PASSED Postflight db_migration_check completed","title":"Postflight checks"},{"location":"postflight_checks/#postflight-checks","text":"Postflight checks are performed after qliksense is installed on the cluster and during normal operating mode of the product. Such checks can range from validating certain conditions to checking the status of certain operations or entities on the kubernetes cluster. Run the following command to view help about the commands supported by postflight at any moment: $ qliksense postflight perform postflight checks on the cluster Usage: qliksense postflight [command] Examples: qliksense postflight <postflight_check_to_run> Available Commands: db-migration-check check mongodb migration status on the cluster Flags: -h, --help help for postflight -v, --verbose verbose mode","title":"Postflight checks"},{"location":"postflight_checks/#run-all-postflight-checks","text":"This command runs all the postflight checks available. $ qliksense postflight all Running all postflight checks... Postflight db migration check... Logs from pod: qliksense-users-6977cb7788-qlgmv { \"caller\" : \"main.go:39\" , \"environment\" : \"qseok\" , \"error\" : \"error parsing uri: scheme must be \\\"mongodb\\\" or \\\"mongodb+srv\\\"\" , \"level\" : \"error\" , \"message\" : \"failed to connect to \" , \"timestamp\" : \"2020-06-17T04:10:11.7891913Z\" , \"version\" : \"\" } To view more logs in this context, please run the command: kubectl logs -n test_ns qliksense-users-6977cb7788-qlgmv migration PASSED All postflight checks have PASSED","title":"Run all postflight checks"},{"location":"postflight_checks/#db-migration-check","text":"This command checks init containers for successful database migrarion completions, and reports failure, if any to the user. An example run of this check produces an output as shown below: $ qliksense postflight db-migration-check Logs from pod: qliksense-users-6977cb7788-cxxwh { \"caller\" : \"main.go:39\" , \"environment\" : \"qseok\" , \"error\" : \"error parsing uri: scheme must be \\\"mongodb\\\" or \\\"mongodb+srv\\\"\" , \"level\" : \"error\" , \"message\" : \"failed to connect to \" , \"timestamp\" : \"2020-06-01T01:07:18.4170507Z\" , \"version\" : \"\" } To view more logs in this context, please run the command: kubectl logs -n test_ns qliksense-users-6977cb7788-qlgmv migration PASSED Postflight db_migration_check completed","title":"DB migration check"},{"location":"preflight_checks/","text":"Preflight checks \u00b6 Preflight checks provide pre-installation cluster conformance testing and validation before we install qliksense on the cluster. We gather a suite of conformance tests that can be easily written and run on the target cluster to verify that cluster-specific requirements are met. We support a couple of tests at the moment as part of preflight checks, and the range of the suite will be expanded in future. Run the following command to view help about the commands supported by preflight at any moment: $ qliksense preflight perform preflight checks on the cluster Usage: qliksense preflight [ command ] Examples: qliksense preflight <preflight_check_to_run> Available Commands: all perform all checks authcheck preflight authcheck clean perform preflight clean deployment perform preflight deployment check dns perform preflight dns check k8s-version check kubernetes version mongo preflight mongo OR preflight mongo --url = <url> pod perform preflight pod check role preflight create role check rolebinding preflight create rolebinding check service perform preflight service check serviceaccount preflight create ServiceAccount check Flags: -h, --help help for preflight -v, --verbose verbose mode DNS check \u00b6 Run the following command to perform preflight DNS check. We setup a kubernetes deployment and try to reach it as part of establishing DNS connectivity in this check. The expected output should be similar to the one shown below. $ qliksense preflight dns -v Preflight DNS check --------------------- Created deployment \"dep-dns-preflight-check\" Created service \"svc-dns-pf-check\" Created pod: pf-pod-1 Fetching pod: pf-pod-1 Fetching pod: pf-pod-1 Exec-ing into the container... Preflight DNS check: PASSED Completed preflight DNS check Cleaning up resources... Deleted pod: pf-pod-1 Deleted service: svc-dns-pf-check Deleted deployment: dep-dns-preflight-check Kubernetes version check \u00b6 We check the version of the target kubernetes cluster and ensure that it falls in the valid range of kubernetes versions that are supported by qliksense. The command to run this check and the expected similar output are as shown below: $ qliksense preflight k8s-version -v Preflight kubernetes minimum version check ------------------------------------------ Kubernetes API Server version: v1.15.5 Current K8s Version: 1 .15.5 Current 1 .15.5 is greater than minimum required version:1.11.0, hence good to go Preflight minimum kubernetes version check: PASSED Completed Preflight kubernetes minimum version check Service check \u00b6 We use the commmand below to test if we are able to create a service in the cluster. $ qliksense preflight service -v Preflight service check ----------------------- Preflight service check: Created service \"svc-pf-check\" Preflight service creation check: PASSED Cleaning up resources... Deleted service: svc-pf-check Completed preflight service check Deployment check \u00b6 We use the commmand below to test if we are able to create a deployment in the cluster. After the test exexutes, we wait until the created deployment terminates before we exit the command. $ qliksense preflight deployment -v Preflight deployment check ----------------------- Preflight deployment check: Created deployment \"deployment-preflight-check\" Preflight Deployment check: PASSED Cleaning up resources... Deleted deployment: deployment-preflight-check Completed preflight deployment check Pod check \u00b6 We use the commmand below to test if we are able to create a pod in the cluster. $ qliksense preflight pod -v Preflight pod check -------------------- Preflight pod check: Created pod: pod-pf-check Preflight pod creation check: PASSED Cleaning up resources... Deleted pod: pod-pf-check Completed preflight pod check Role check \u00b6 We use the command below to test if we are able to create a role in the cluster $ qliksense preflight role -v Preflight role check --------------------------- Preflight role check: Created role: role-preflight-check Preflight role check: PASSED Cleaning up resources... Deleted role: role-preflight-check Completed preflight role check RoleBinding check \u00b6 We use the command below to test if we are able to create a role binding in the cluster $ qliksense preflight rolebinding -v Preflight rolebinding check --------------------------- Preflight rolebinding check: Created RoleBinding: role-binding-preflight-check Preflight rolebinding check: PASSED Cleaning up resources... Deleting RoleBinding: role-binding-preflight-check Deleted RoleBinding: role-binding-preflight-check Completed preflight rolebinding check Create-ServiceAccount check \u00b6 We use the command below to test if we are able to create a service account in the cluster $ qliksense preflight serviceaccount -v Preflight ServiceAccount check ------------------------------------- Preflight serviceaccount check: Created Service Account: preflight-check-test-serviceaccount Preflight serviceaccount check: PASSED Cleaning up resources... Deleting ServiceAccount: preflight-check-test-serviceaccount Deleted ServiceAccount: preflight-check-test-serviceaccount Completed preflight serviceaccount check Auth check \u00b6 We use the command below to combine creation of role, role binding, and service account tests $ qliksense preflight authcheck -v Preflight auth check ------------------------------------- Preflight create-role check: Created role: role-preflight-check Preflight create-role check: PASSED Cleaning up resources... Deleted role: role-preflight-check Completed preflight create-role check Preflight create RoleBinding check: Created RoleBinding: role-binding-preflight-check Preflight create RoleBinding check: PASSED Cleaning up resources... Deleted RoleBinding: role-binding-preflight-check Completed preflight create RoleBinding check Preflight createServiceAccount check: Created Service Account: preflight-check-test-serviceaccount Preflight createServiceAccount check: PASSED Cleaning up resources... Deleted ServiceAccount: preflight-check-test-serviceaccount Completed preflight createServiceAccount check Completed preflight auth check Mongodb check \u00b6 We can check if we are able to connect to an instance of mongodb on the cluster by either supplying the mongodbUri as part of the command or infer it from the current context. qliksense preflight mongo --url = <url> -v OR qliksense preflight mongo -v qliksense preflight mongo --url = <mongo-server url> --ca-cert = <path to ca-cert file> -v Preflight mongo check --------------------- Preflight mongodb check: Created pod: pf-mongo-pod stdout: MongoDB shell version v4.2.5 connecting to: <url>/?compressors = disabled & gssapiServiceName = mongodb Implicit session: session { \"id\" : UUID ( \"...\" ) } MongoDB server version: 4 .2.5 bye stderr: Preflight mongo check: PASSED Deleted pod: pf-mongo-pod Completed preflight mongodb check Mongodb check with mutual tls \u00b6 In order to perform mutual tls with mongo we need to: - append client certificate to the beginning/end of CA certificate. Make sure to include the beginning and end tags on each certificate. The CA certificate file should look like this in the end: <existing contents of CA cert> ... -----BEGIN RSA PRIVATE KEY----- <private key> -----END RSA PRIVATE KEY----- -----BEGIN CERTIFICATE----- <public key> -----END CERTIFICATE----- - Run the command below to set the ca certificate into the CR cat <path_to_ca.crt> | base64 | qliksense config set-secrets qliksense.caCertificates --base64 Next, run: qliksense preflight mongo -v Running all checks \u00b6 Run the command shown below to execute all preflight checks. $ qliksense preflight all --mongodb-url = <url> -v OR $ qliksense preflight all --mongodb-url = <mongo-server url> --mongodb-ca-cert = <path to ca-cert file> -v Running all preflight checks Preflight DNS check ------------------- Created deployment \"dep-dns-preflight-check\" Created service \"svc-dns-pf-check\" Created pod: pf-pod-1 Fetching pod: pf-pod-1 Fetching pod: pf-pod-1 Exec-ing into the container... Preflight DNS check: PASSED Completed preflight DNS check Cleaning up resources... Deleted pod: pf-pod-1 Deleted service: svc-dns-pf-check Deleted deployment: dep-dns-preflight-check Preflight kubernetes minimum version check ------------------------------------------ Kubernetes API Server version: v1.15.5 Current K8s Version: 1 .15.5 Current 1 .15.5 is greater than minimum required version:1.11.0, hence good to go Preflight minimum kubernetes version check: PASSED Completed Preflight kubernetes minimum version check ... ... All preflight checks have PASSED Completed running all preflight checks Clean \u00b6 Run the command below to cleanup entities that were created for the purpose of running preflight checks and left behind in the cluster. $ qliksense preflight clean -v Preflight clean ---------------- Removing deployment... Removing service... Removing pod... Removing role... Removing rolebinding... Removing serviceaccount... Removing DNS check components... Removing mongo check components... Preflight cleanup complete Verify-ca-chain check \u00b6 We use the command below to verify the ca certificate chain and server certificate. We run this check over mongodbUrl and discoveryUrl we inferred from idpconfigs in the CR. $ qliksense preflight preflight verify-ca-chain -v Preflight verify-ca-chain check... ----------------------------------- Openssl verify mongodbUrl: Mongodb url inferred form CR: <mongodbUrl_from_CR> Host: <host extracted from mongodbUrl> Openssl verify discoveryUrl: Discovery url: <discoveryUrl_from_CR> Host: <host extracted from discoveryUrl> Completed preflight verify-CA-chain check PASSED","title":"Preflight checks"},{"location":"preflight_checks/#preflight-checks","text":"Preflight checks provide pre-installation cluster conformance testing and validation before we install qliksense on the cluster. We gather a suite of conformance tests that can be easily written and run on the target cluster to verify that cluster-specific requirements are met. We support a couple of tests at the moment as part of preflight checks, and the range of the suite will be expanded in future. Run the following command to view help about the commands supported by preflight at any moment: $ qliksense preflight perform preflight checks on the cluster Usage: qliksense preflight [ command ] Examples: qliksense preflight <preflight_check_to_run> Available Commands: all perform all checks authcheck preflight authcheck clean perform preflight clean deployment perform preflight deployment check dns perform preflight dns check k8s-version check kubernetes version mongo preflight mongo OR preflight mongo --url = <url> pod perform preflight pod check role preflight create role check rolebinding preflight create rolebinding check service perform preflight service check serviceaccount preflight create ServiceAccount check Flags: -h, --help help for preflight -v, --verbose verbose mode","title":"Preflight checks"},{"location":"preflight_checks/#dns-check","text":"Run the following command to perform preflight DNS check. We setup a kubernetes deployment and try to reach it as part of establishing DNS connectivity in this check. The expected output should be similar to the one shown below. $ qliksense preflight dns -v Preflight DNS check --------------------- Created deployment \"dep-dns-preflight-check\" Created service \"svc-dns-pf-check\" Created pod: pf-pod-1 Fetching pod: pf-pod-1 Fetching pod: pf-pod-1 Exec-ing into the container... Preflight DNS check: PASSED Completed preflight DNS check Cleaning up resources... Deleted pod: pf-pod-1 Deleted service: svc-dns-pf-check Deleted deployment: dep-dns-preflight-check","title":"DNS check"},{"location":"preflight_checks/#kubernetes-version-check","text":"We check the version of the target kubernetes cluster and ensure that it falls in the valid range of kubernetes versions that are supported by qliksense. The command to run this check and the expected similar output are as shown below: $ qliksense preflight k8s-version -v Preflight kubernetes minimum version check ------------------------------------------ Kubernetes API Server version: v1.15.5 Current K8s Version: 1 .15.5 Current 1 .15.5 is greater than minimum required version:1.11.0, hence good to go Preflight minimum kubernetes version check: PASSED Completed Preflight kubernetes minimum version check","title":"Kubernetes version check"},{"location":"preflight_checks/#service-check","text":"We use the commmand below to test if we are able to create a service in the cluster. $ qliksense preflight service -v Preflight service check ----------------------- Preflight service check: Created service \"svc-pf-check\" Preflight service creation check: PASSED Cleaning up resources... Deleted service: svc-pf-check Completed preflight service check","title":"Service check"},{"location":"preflight_checks/#deployment-check","text":"We use the commmand below to test if we are able to create a deployment in the cluster. After the test exexutes, we wait until the created deployment terminates before we exit the command. $ qliksense preflight deployment -v Preflight deployment check ----------------------- Preflight deployment check: Created deployment \"deployment-preflight-check\" Preflight Deployment check: PASSED Cleaning up resources... Deleted deployment: deployment-preflight-check Completed preflight deployment check","title":"Deployment check"},{"location":"preflight_checks/#pod-check","text":"We use the commmand below to test if we are able to create a pod in the cluster. $ qliksense preflight pod -v Preflight pod check -------------------- Preflight pod check: Created pod: pod-pf-check Preflight pod creation check: PASSED Cleaning up resources... Deleted pod: pod-pf-check Completed preflight pod check","title":"Pod check"},{"location":"preflight_checks/#role-check","text":"We use the command below to test if we are able to create a role in the cluster $ qliksense preflight role -v Preflight role check --------------------------- Preflight role check: Created role: role-preflight-check Preflight role check: PASSED Cleaning up resources... Deleted role: role-preflight-check Completed preflight role check","title":"Role check"},{"location":"preflight_checks/#rolebinding-check","text":"We use the command below to test if we are able to create a role binding in the cluster $ qliksense preflight rolebinding -v Preflight rolebinding check --------------------------- Preflight rolebinding check: Created RoleBinding: role-binding-preflight-check Preflight rolebinding check: PASSED Cleaning up resources... Deleting RoleBinding: role-binding-preflight-check Deleted RoleBinding: role-binding-preflight-check Completed preflight rolebinding check","title":"RoleBinding check"},{"location":"preflight_checks/#create-serviceaccount-check","text":"We use the command below to test if we are able to create a service account in the cluster $ qliksense preflight serviceaccount -v Preflight ServiceAccount check ------------------------------------- Preflight serviceaccount check: Created Service Account: preflight-check-test-serviceaccount Preflight serviceaccount check: PASSED Cleaning up resources... Deleting ServiceAccount: preflight-check-test-serviceaccount Deleted ServiceAccount: preflight-check-test-serviceaccount Completed preflight serviceaccount check","title":"Create-ServiceAccount check"},{"location":"preflight_checks/#auth-check","text":"We use the command below to combine creation of role, role binding, and service account tests $ qliksense preflight authcheck -v Preflight auth check ------------------------------------- Preflight create-role check: Created role: role-preflight-check Preflight create-role check: PASSED Cleaning up resources... Deleted role: role-preflight-check Completed preflight create-role check Preflight create RoleBinding check: Created RoleBinding: role-binding-preflight-check Preflight create RoleBinding check: PASSED Cleaning up resources... Deleted RoleBinding: role-binding-preflight-check Completed preflight create RoleBinding check Preflight createServiceAccount check: Created Service Account: preflight-check-test-serviceaccount Preflight createServiceAccount check: PASSED Cleaning up resources... Deleted ServiceAccount: preflight-check-test-serviceaccount Completed preflight createServiceAccount check Completed preflight auth check","title":"Auth check"},{"location":"preflight_checks/#mongodb-check","text":"We can check if we are able to connect to an instance of mongodb on the cluster by either supplying the mongodbUri as part of the command or infer it from the current context. qliksense preflight mongo --url = <url> -v OR qliksense preflight mongo -v qliksense preflight mongo --url = <mongo-server url> --ca-cert = <path to ca-cert file> -v Preflight mongo check --------------------- Preflight mongodb check: Created pod: pf-mongo-pod stdout: MongoDB shell version v4.2.5 connecting to: <url>/?compressors = disabled & gssapiServiceName = mongodb Implicit session: session { \"id\" : UUID ( \"...\" ) } MongoDB server version: 4 .2.5 bye stderr: Preflight mongo check: PASSED Deleted pod: pf-mongo-pod Completed preflight mongodb check","title":"Mongodb check"},{"location":"preflight_checks/#mongodb-check-with-mutual-tls","text":"In order to perform mutual tls with mongo we need to: - append client certificate to the beginning/end of CA certificate. Make sure to include the beginning and end tags on each certificate. The CA certificate file should look like this in the end: <existing contents of CA cert> ... -----BEGIN RSA PRIVATE KEY----- <private key> -----END RSA PRIVATE KEY----- -----BEGIN CERTIFICATE----- <public key> -----END CERTIFICATE----- - Run the command below to set the ca certificate into the CR cat <path_to_ca.crt> | base64 | qliksense config set-secrets qliksense.caCertificates --base64 Next, run: qliksense preflight mongo -v","title":"Mongodb check with mutual tls"},{"location":"preflight_checks/#running-all-checks","text":"Run the command shown below to execute all preflight checks. $ qliksense preflight all --mongodb-url = <url> -v OR $ qliksense preflight all --mongodb-url = <mongo-server url> --mongodb-ca-cert = <path to ca-cert file> -v Running all preflight checks Preflight DNS check ------------------- Created deployment \"dep-dns-preflight-check\" Created service \"svc-dns-pf-check\" Created pod: pf-pod-1 Fetching pod: pf-pod-1 Fetching pod: pf-pod-1 Exec-ing into the container... Preflight DNS check: PASSED Completed preflight DNS check Cleaning up resources... Deleted pod: pf-pod-1 Deleted service: svc-dns-pf-check Deleted deployment: dep-dns-preflight-check Preflight kubernetes minimum version check ------------------------------------------ Kubernetes API Server version: v1.15.5 Current K8s Version: 1 .15.5 Current 1 .15.5 is greater than minimum required version:1.11.0, hence good to go Preflight minimum kubernetes version check: PASSED Completed Preflight kubernetes minimum version check ... ... All preflight checks have PASSED Completed running all preflight checks","title":"Running all checks"},{"location":"preflight_checks/#clean","text":"Run the command below to cleanup entities that were created for the purpose of running preflight checks and left behind in the cluster. $ qliksense preflight clean -v Preflight clean ---------------- Removing deployment... Removing service... Removing pod... Removing role... Removing rolebinding... Removing serviceaccount... Removing DNS check components... Removing mongo check components... Preflight cleanup complete","title":"Clean"},{"location":"preflight_checks/#verify-ca-chain-check","text":"We use the command below to verify the ca certificate chain and server certificate. We run this check over mongodbUrl and discoveryUrl we inferred from idpconfigs in the CR. $ qliksense preflight preflight verify-ca-chain -v Preflight verify-ca-chain check... ----------------------------------- Openssl verify mongodbUrl: Mongodb url inferred form CR: <mongodbUrl_from_CR> Host: <host extracted from mongodbUrl> Openssl verify discoveryUrl: Discovery url: <discoveryUrl_from_CR> Host: <host extracted from discoveryUrl> Completed preflight verify-CA-chain check PASSED","title":"Verify-ca-chain check"}]}